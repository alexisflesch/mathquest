import{_ as n,c as a,a as e,o as t}from"./app-DoDG4mLI.js";const p={};function c(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="tests-et-qualite" tabindex="-1"><a class="header-anchor" href="#tests-et-qualite"><span>Tests et qualité</span></a></h1><h2 id="vue-d-ensemble" tabindex="-1"><a class="header-anchor" href="#vue-d-ensemble"><span>Vue d&#39;ensemble</span></a></h2><p>MathQuest maintient une suite de tests complète couvrant les tests unitaires, d&#39;intégration et end-to-end. La stratégie de test suit les principes suivants :</p><ul><li><strong>Tests unitaires</strong> : Logique métier isolée</li><li><strong>Tests d&#39;intégration</strong> : Interactions entre composants</li><li><strong>Tests end-to-end</strong> : Parcours utilisateur complets</li><li><strong>Tests de performance</strong> : Métriques et optimisations</li></ul><h2 id="configuration-jest" tabindex="-1"><a class="header-anchor" href="#configuration-jest"><span>Configuration Jest</span></a></h2><h3 id="backend-node-js" tabindex="-1"><a class="header-anchor" href="#backend-node-js"><span>Backend (Node.js)</span></a></h3><p>Le fichier <code>jest.config.js</code> configure Jest pour le backend :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">&#39;ts-jest&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">roots</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;rootDir&gt;/src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;rootDir&gt;/tests&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">testMatch</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;**/__tests__/**/*.+(ts|tsx|js)&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;**/?(*.)+(spec|test).+(ts|tsx|js)&#39;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;^.+\\\\.(ts|tsx)$&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;ts-jest&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">tsconfig</span><span class="token operator">:</span> <span class="token string">&#39;tsconfig.tests.json&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">moduleFileExtensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">collectCoverage</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Désactivé pour la vitesse</span></span>
<span class="line">  <span class="token literal-property property">clearMocks</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">globalSetup</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/tests/support/globalSetup.ts&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">globalTeardown</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/tests/support/globalTeardown.ts&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">setupFiles</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;rootDir&gt;/tests/setupTestEnv.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;^@/(.*)$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/src/$1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;^@shared/(.*)$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/../shared/$1&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">maxConcurrency</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">maxWorkers</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">forceExit</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">testTimeout</span><span class="token operator">:</span> <span class="token number">10000</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="frontend-next-js" tabindex="-1"><a class="header-anchor" href="#frontend-next-js"><span>Frontend (Next.js)</span></a></h3><p>Configuration Jest pour le frontend :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">&#39;jsdom&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;^.+\\\\.(js|jsx|ts|tsx)$&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@swc/jest&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">jsc</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">syntax</span><span class="token operator">:</span> <span class="token string">&#39;typescript&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token string">&#39;automatic&#39;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;\\\\.(css|less|sass|scss)$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;identity-obj-proxy&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;^next/link$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/next-link-mock.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;^next/image$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/next-image-mock.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;^@/(.*)$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/src/$1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;^@shared/(.*)$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/../shared/$1&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">setupFilesAfterEnv</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./jest.setup.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">testPathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/node_modules/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/.next/&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="environnement-de-test" tabindex="-1"><a class="header-anchor" href="#environnement-de-test"><span>Environnement de test</span></a></h2><h3 id="variables-d-environnement-de-test" tabindex="-1"><a class="header-anchor" href="#variables-d-environnement-de-test"><span>Variables d&#39;environnement de test</span></a></h3><p>Le fichier <code>setupTestEnv.js</code> configure l&#39;environnement de test :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span> <span class="token operator">=</span> <span class="token string">&quot;postgresql://postgre:dev123@localhost:5432/mathquest_test&quot;</span><span class="token punctuation">;</span></span>
<span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">REDIS_URL</span> <span class="token operator">=</span> <span class="token string">&quot;redis://localhost:6379&quot;</span><span class="token punctuation">;</span></span>
<span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">JWT_SECRET</span> <span class="token operator">=</span> <span class="token string">&quot;test_jwt_secret&quot;</span><span class="token punctuation">;</span></span>
<span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ADMIN_PASSWORD</span> <span class="token operator">=</span> <span class="token string">&quot;test_admin&quot;</span><span class="token punctuation">;</span></span>
<span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token string">&quot;3001&quot;</span><span class="token punctuation">;</span></span>
<span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span> <span class="token operator">=</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span></span>
<span class="line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Vérification de sécurité</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;mathquest&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;mathquest_test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;TEST SAFETY VIOLATION: Test configured to use production database!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="base-de-donnees-de-test" tabindex="-1"><a class="header-anchor" href="#base-de-donnees-de-test"><span>Base de données de test</span></a></h3><p>La base de données de test est isolée de la production :</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- Base de données dédiée aux tests</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mathquest_test<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Permissions pour l&#39;utilisateur de test</span></span>
<span class="line"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token keyword">DATABASE</span> mathquest_test <span class="token keyword">TO</span> postgre<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="structure-des-tests" tabindex="-1"><a class="header-anchor" href="#structure-des-tests"><span>Structure des tests</span></a></h2><h3 id="tests-unitaires" tabindex="-1"><a class="header-anchor" href="#tests-unitaires"><span>Tests unitaires</span></a></h3><p>Les tests unitaires testent des unités isolées :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">tests/unit/</span>
<span class="line">├── new-scoring-strategy.test.ts      # Logique de scoring</span>
<span class="line">├── emailService.test.ts               # Service d&#39;email</span>
<span class="line">├── timerRaceConditions.test.ts        # Conditions de course timer</span>
<span class="line">├── socketRateLimiting.test.ts         # Limitation taux Socket.IO</span>
<span class="line">├── latexInjection.test.ts             # Sécurité LaTeX</span>
<span class="line">└── userServiceEmailVerification.test.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Exemple de test unitaire :</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;ScoringService.calculateAnswerScore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should calculate correct score for multiple choice with perfect answer&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Configuration Redis</span></span>
<span class="line">    <span class="token keyword">const</span> accessCode <span class="token operator">=</span> <span class="token string">&#39;TEST123&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">await</span> redisClient<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mathquest:game:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      questionUids<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;question-1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;question-2&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Question parfaite</span></span>
<span class="line">    <span class="token keyword">const</span> question <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      uid<span class="token operator">:</span> <span class="token string">&#39;question-1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      multipleChoiceQuestion<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        correctAnswers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> score<span class="token punctuation">,</span> timePenalty <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> ScoringService<span class="token punctuation">.</span><span class="token function">calculateAnswerScore</span><span class="token punctuation">(</span></span>
<span class="line">      question<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Réponses correctes</span></span>
<span class="line">      <span class="token number">1000</span><span class="token punctuation">,</span>   <span class="token comment">// 1 seconde</span></span>
<span class="line">      <span class="token number">1000</span><span class="token punctuation">,</span>   <span class="token comment">// temps total</span></span>
<span class="line">      accessCode</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>timePenalty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tests-d-integration" tabindex="-1"><a class="header-anchor" href="#tests-d-integration"><span>Tests d&#39;intégration</span></a></h3><p>Les tests d&#39;intégration testent les interactions :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">tests/integration/</span>
<span class="line">├── tournament-mode-logic.test.ts      # Logique tournoi</span>
<span class="line">├── scoring-all-modes.test.ts          # Scoring tous modes</span>
<span class="line">├── deferred-tournament-fixes.test.ts  # Corrections tournois différés</span>
<span class="line">├── leaderboard-payload.test.ts        # Payloads leaderboard</span>
<span class="line">├── timer-sync.test.ts                 # Synchronisation timers</span>
<span class="line">└── database-reality-check.test.ts     # Vérifications DB</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Exemple de test d&#39;intégration :</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Tournament Mode Scoring&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should handle live vs deferred tournaments differently&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Test de la logique de différenciation</span></span>
<span class="line">    <span class="token keyword">const</span> liveGame <span class="token operator">=</span> <span class="token punctuation">{</span> playMode<span class="token operator">:</span> <span class="token string">&#39;tournament&#39;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">&#39;active&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> deferredGame <span class="token operator">=</span> <span class="token punctuation">{</span> playMode<span class="token operator">:</span> <span class="token string">&#39;tournament&#39;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">&#39;completed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>liveGame<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>deferredGame<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;completed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Vérification des clés Redis</span></span>
<span class="line">    <span class="token keyword">const</span> liveKey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mathquest:game:leaderboard:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> deferredKey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">deferred_session:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>liveKey<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>deferredKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tests-de-cas-limites" tabindex="-1"><a class="header-anchor" href="#tests-de-cas-limites"><span>Tests de cas limites</span></a></h3><p>Les tests de cas limites couvrent les scénarios edge :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">tests/edge-cases-*.test.ts</span>
<span class="line">├── edge-cases-game-sessions.test.ts   # Sessions de jeu</span>
<span class="line">├── edge-cases-timer-scoring.test.ts   # Timer et scoring</span>
<span class="line">├── edge-cases-tournament-mode.test.ts # Mode tournoi</span>
<span class="line">├── edge-cases-user-authentication.test.ts # Authentification</span>
<span class="line">├── edge-cases-network-connection.test.ts  # Connexions réseau</span>
<span class="line">└── edge-cases-multi-device.test.ts    # Multi-appareils</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Exemple de test de cas limite :</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Timer Edge Cases&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should handle timer restart penalties correctly&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Test des pénalités de redémarrage</span></span>
<span class="line">    <span class="token keyword">const</span> restartCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> basePenalty <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">// 50% pour 3ème essai</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>restartCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>basePenalty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should cap penalty at 50% for excessive restarts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Test du plafond de pénalité</span></span>
<span class="line">    <span class="token keyword">const</span> excessiveRestarts <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> maxPenalty <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>excessiveRestarts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>maxPenalty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="execution-des-tests" tabindex="-1"><a class="header-anchor" href="#execution-des-tests"><span>Exécution des tests</span></a></h2><h3 id="commandes-de-test" tabindex="-1"><a class="header-anchor" href="#commandes-de-test"><span>Commandes de test</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># Tests backend - tous</span></span>
<span class="line"><span class="token builtin class-name">cd</span> backend <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token builtin class-name">test</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests backend - unitaires seulement</span></span>
<span class="line"><span class="token function">npm</span> run test:unit</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests backend - intégration seulement</span></span>
<span class="line"><span class="token function">npm</span> run test:integration</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests backend - avec couverture</span></span>
<span class="line"><span class="token function">npm</span> run test:coverage</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests backend - fichier spécifique</span></span>
<span class="line"><span class="token function">npm</span> <span class="token builtin class-name">test</span> new-scoring-strategy.test.ts</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests frontend</span></span>
<span class="line"><span class="token builtin class-name">cd</span> frontend <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token builtin class-name">test</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests end-to-end (Playwright)</span></span>
<span class="line"><span class="token builtin class-name">cd</span> app <span class="token operator">&amp;&amp;</span> npx playwright <span class="token builtin class-name">test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tests-en-continu" tabindex="-1"><a class="header-anchor" href="#tests-en-continu"><span>Tests en continu</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># Mode watch</span></span>
<span class="line"><span class="token function">npm</span> run test:watch</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tests avant commit (husky)</span></span>
<span class="line"><span class="token function">npm</span> run test:precommit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mocks-et-utilitaires-de-test" tabindex="-1"><a class="header-anchor" href="#mocks-et-utilitaires-de-test"><span>Mocks et utilitaires de test</span></a></h2><h3 id="mocks-redis" tabindex="-1"><a class="header-anchor" href="#mocks-redis"><span>Mocks Redis</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> redisClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../src/config/redis&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Nettoyage avant/après chaque test</span></span>
<span class="line"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> redisClient<span class="token punctuation">.</span><span class="token function">flushall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> redisClient<span class="token punctuation">.</span><span class="token function">flushall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mocks-de-base-de-donnees" tabindex="-1"><a class="header-anchor" href="#mocks-de-base-de-donnees"><span>Mocks de base de données</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> prisma <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../src/db/prisma&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Mock du client Prisma</span></span>
<span class="line">jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;../../src/db/prisma&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  prisma<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    user<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      findUnique<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      create<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="utilitaires-de-test" tabindex="-1"><a class="header-anchor" href="#utilitaires-de-test"><span>Utilitaires de test</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Utilitaires pour créer des données de test</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createTestUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token string">&#39;test-user-id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  username<span class="token operator">:</span> <span class="token string">&#39;testuser&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token string">&#39;test@example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  role<span class="token operator">:</span> <span class="token string">&#39;STUDENT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>overrides</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createTestGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token string">&#39;test-game-id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Test Game&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  accessCode<span class="token operator">:</span> <span class="token string">&#39;TEST123&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  playMode<span class="token operator">:</span> <span class="token string">&#39;quiz&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  status<span class="token operator">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>overrides</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tests-de-performance" tabindex="-1"><a class="header-anchor" href="#tests-de-performance"><span>Tests de performance</span></a></h2><h3 id="metriques-de-performance" tabindex="-1"><a class="header-anchor" href="#metriques-de-performance"><span>Métriques de performance</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Performance Tests&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should handle 1000 concurrent users&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Simulation de charge</span></span>
<span class="line">    <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> ScoringService<span class="token punctuation">.</span><span class="token function">calculateAnswerScore</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> endTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt; 5 secondes</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tests-de-charge-socket-io" tabindex="-1"><a class="header-anchor" href="#tests-de-charge-socket-io"><span>Tests de charge Socket.IO</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Socket.IO Load Tests&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should handle multiple simultaneous connections&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> connections <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Créer plusieurs connexions Socket.IO</span></span>
<span class="line">    <span class="token keyword">const</span> sockets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> connections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3007&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      sockets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Vérifier que toutes les connexions sont établies</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>sockets<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>socket <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>sockets<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>connections<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tests-end-to-end-e2e" tabindex="-1"><a class="header-anchor" href="#tests-end-to-end-e2e"><span>Tests end-to-end (E2E)</span></a></h2><h3 id="configuration-playwright" tabindex="-1"><a class="header-anchor" href="#configuration-playwright"><span>Configuration Playwright</span></a></h3><p>Le fichier <code>playwright.config.ts</code> :</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  testDir<span class="token operator">:</span> <span class="token string">&#39;./tests&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  use<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    baseURL<span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    browserName<span class="token operator">:</span> <span class="token string">&#39;chromium&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    headless<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    screenshot<span class="token operator">:</span> <span class="token string">&#39;only-on-failure&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  projects<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      name<span class="token operator">:</span> <span class="token string">&#39;chromium&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      use<span class="token operator">:</span> <span class="token punctuation">{</span> browserName<span class="token operator">:</span> <span class="token string">&#39;chromium&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exemple-de-test-e2e" tabindex="-1"><a class="header-anchor" href="#exemple-de-test-e2e"><span>Exemple de test E2E</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;complete quiz workflow&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Connexion</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;email&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;teacher@test.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;password&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;login-button&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Création d&#39;un quiz</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;create-quiz&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;quiz-name&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test Quiz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;save-quiz&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Vérification</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;[data-testid=&quot;quiz-list&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">&#39;Test Quiz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qualite-du-code" tabindex="-1"><a class="header-anchor" href="#qualite-du-code"><span>Qualité du code</span></a></h2><h3 id="linting-et-formatage" tabindex="-1"><a class="header-anchor" href="#linting-et-formatage"><span>Linting et formatage</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># ESLint</span></span>
<span class="line"><span class="token function">npm</span> run lint</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Prettier</span></span>
<span class="line"><span class="token function">npm</span> run <span class="token function">format</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># TypeScript checking</span></span>
<span class="line"><span class="token function">npm</span> run type-check</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="couverture-de-code" tabindex="-1"><a class="header-anchor" href="#couverture-de-code"><span>Couverture de code</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># Génération du rapport de couverture</span></span>
<span class="line"><span class="token function">npm</span> run test:coverage</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Rapport HTML</span></span>
<span class="line"><span class="token function">open</span> coverage/lcov-report/index.html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="metriques-de-qualite" tabindex="-1"><a class="header-anchor" href="#metriques-de-qualite"><span>Métriques de qualité</span></a></h3><ul><li><strong>Couverture de code</strong> : &gt; 80%</li><li><strong>Complexité cyclomatique</strong> : &lt; 10 par fonction</li><li><strong>Duplication de code</strong> : &lt; 5%</li><li><strong>Temps d&#39;exécution des tests</strong> : &lt; 5 minutes</li></ul><h2 id="integration-continue" tabindex="-1"><a class="header-anchor" href="#integration-continue"><span>Intégration continue</span></a></h2><h3 id="github-actions" tabindex="-1"><a class="header-anchor" href="#github-actions"><span>GitHub Actions</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI</span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> pull_request<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">test</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&#39;18&#39;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run lint</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm test</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hooks-de-pre-commit" tabindex="-1"><a class="header-anchor" href="#hooks-de-pre-commit"><span>Hooks de pré-commit</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run lint &amp;&amp; npm run test:unit&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;pre-push&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run test:integration&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging-des-tests" tabindex="-1"><a class="header-anchor" href="#debugging-des-tests"><span>Debugging des tests</span></a></h2><h3 id="logs-de-test" tabindex="-1"><a class="header-anchor" href="#logs-de-test"><span>Logs de test</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Logs détaillés pour le debugging</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Test data:&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> userId<span class="token punctuation">,</span> gameId<span class="token punctuation">,</span> score <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Utilisation du logger de l&#39;application</span></span>
<span class="line"><span class="token keyword">import</span> createLogger <span class="token keyword">from</span> <span class="token string">&#39;../../src/utils/logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token string">&#39;TestDebug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Test execution details&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isolation-des-tests" tabindex="-1"><a class="header-anchor" href="#isolation-des-tests"><span>Isolation des tests</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Chaque test est isolé</span></span>
<span class="line"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> redisClient<span class="token punctuation">.</span><span class="token function">flushall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> redisClient<span class="token punctuation">.</span><span class="token function">flushall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="maintenance-des-tests" tabindex="-1"><a class="header-anchor" href="#maintenance-des-tests"><span>Maintenance des tests</span></a></h2><h3 id="refactoring-des-tests" tabindex="-1"><a class="header-anchor" href="#refactoring-des-tests"><span>Refactoring des tests</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Extraire les données de test communes</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">TEST_USERS</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  teacher<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;teacher-1&#39;</span><span class="token punctuation">,</span> role<span class="token operator">:</span> <span class="token string">&#39;TEACHER&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  student<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;student-1&#39;</span><span class="token punctuation">,</span> role<span class="token operator">:</span> <span class="token string">&#39;STUDENT&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Utiliser des factories</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">createTestGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token string">&#39;game-1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Test Game&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>overrides</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tests-legacy" tabindex="-1"><a class="header-anchor" href="#tests-legacy"><span>Tests legacy</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Marquer les tests legacy</span></span>
<span class="line">describe<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">&#39;Legacy Tests&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should be updated to new patterns&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// TODO: Refactor this test</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cette stratégie de test assure la fiabilité et la maintenabilité de MathQuest tout en permettant une évolution rapide des fonctionnalités.</p>`,80)]))}const o=n(p,[["render",c]]),u=JSON.parse('{"path":"/details-techniques/tests.html","title":"Tests et qualité","lang":"fr-FR","frontmatter":{},"git":{"updatedTime":1758286875000,"contributors":[{"name":"alexisflesch","username":"alexisflesch","email":"alexis.flesch@gmail.com","commits":1,"url":"https://github.com/alexisflesch"}],"changelog":[{"hash":"8fbb71211cc25ed6748dfb46362eb2796047c9da","time":1758286875000,"email":"alexis.flesch@gmail.com","author":"alexisflesch","message":"updating doc"}]},"filePathRelative":"details-techniques/tests.md"}');export{o as comp,u as data};
