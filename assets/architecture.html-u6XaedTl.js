import{_ as s,c as n,a as i,o as a}from"./app-DoDG4mLI.js";const t={};function r(o,e){return a(),n("div",null,e[0]||(e[0]=[i(`<h1 id="architecture-generale" tabindex="-1"><a class="header-anchor" href="#architecture-generale"><span>Architecture générale</span></a></h1><h2 id="vue-d-ensemble-de-l-architecture" tabindex="-1"><a class="header-anchor" href="#vue-d-ensemble-de-l-architecture"><span>Vue d&#39;ensemble de l&#39;architecture</span></a></h2><p>MathQuest suit une architecture moderne full-stack avec séparation claire des responsabilités :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐</span>
<span class="line">│   Frontend      │    │    Backend      │    │   Database      │</span>
<span class="line">│   (Next.js)     │◄──►│   (Node.js)     │◄──►│  (PostgreSQL)   │</span>
<span class="line">│                 │    │                 │    │                 │</span>
<span class="line">│ - React/TSX     │    │ - Express       │    │ - Prisma ORM    │</span>
<span class="line">│ - Socket.IO     │    │ - Socket.IO     │    │ - GameTemplate  │</span>
<span class="line">│ - Responsive    │    │ - REST API      │    │ - GameInstance  │</span>
<span class="line">│ - PWA ready     │    │ - Services      │    │ - User          │</span>
<span class="line">└─────────────────┘    └─────────────────┘    └─────────────────┘</span>
<span class="line">       │                       │                       │</span>
<span class="line">       └───────────────────────┼───────────────────────┘</span>
<span class="line">                               │</span>
<span class="line">                    ┌─────────────────┐</span>
<span class="line">                    │     Redis       │</span>
<span class="line">                    │   (Cache)       │</span>
<span class="line">                    │                 │</span>
<span class="line">                    │ - Sessions      │</span>
<span class="line">                    │ - Timers        │</span>
<span class="line">                    │ - Game state    │</span>
<span class="line">                    └─────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="architecture-detaillee" tabindex="-1"><a class="header-anchor" href="#architecture-detaillee"><span>Architecture détaillée</span></a></h2><h3 id="frontend-next-js" tabindex="-1"><a class="header-anchor" href="#frontend-next-js"><span>Frontend (Next.js)</span></a></h3><p>Le frontend est organisé selon une structure modulaire :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">frontend/src/</span>
<span class="line">├── app/              # Pages Next.js 13+ (App Router)</span>
<span class="line">├── components/       # Composants React réutilisables</span>
<span class="line">├── hooks/           # Hooks personnalisés (Socket, Auth, etc.)</span>
<span class="line">├── contexts/        # Contextes React (Auth, Game, etc.)</span>
<span class="line">├── types/           # Types TypeScript</span>
<span class="line">├── utils/           # Utilitaires</span>
<span class="line">└── config/          # Configuration</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Technologies clés :</strong></p><ul><li><strong>Next.js 13+</strong> avec App Router</li><li><strong>React 18</strong> avec hooks et Server Components</li><li><strong>TypeScript</strong> pour le typage strict</li><li><strong>Tailwind CSS</strong> pour le styling</li><li><strong>Socket.IO Client</strong> pour la communication temps réel</li><li><strong>React Query</strong> pour la gestion des données</li></ul><h3 id="catalogue-des-composants-react" tabindex="-1"><a class="header-anchor" href="#catalogue-des-composants-react"><span>Catalogue des composants React</span></a></h3><p>Le frontend utilise une bibliothèque de composants organisée par fonctionnalité :</p><h4 id="navigation-layout" tabindex="-1"><a class="header-anchor" href="#navigation-layout"><span>Navigation &amp; Layout</span></a></h4><ul><li><strong>AppNav.tsx</strong> : Barre de navigation principale, responsive, supporte tous les états d&#39;authentification</li><li><strong>AuthProvider.tsx</strong> : Fournit le contexte d&#39;authentification pour utilisateurs anonymes, invités, élèves et professeurs</li><li><strong>TeacherDashboardLayout.tsx</strong> : Layout du dashboard professeur</li><li><strong>LobbyLayout.tsx</strong> : Layout de la salle d&#39;attente des tournois</li></ul><h4 id="interfaces-de-jeu-quiz" tabindex="-1"><a class="header-anchor" href="#interfaces-de-jeu-quiz"><span>Interfaces de jeu &amp; quiz</span></a></h4><ul><li><strong>Scoreboard.tsx</strong> : Affiche le classement des joueurs en temps réel</li><li><strong>ClassementPodium.tsx</strong> : Podium pour les 3 meilleurs joueurs</li><li><strong>QuestionDisplay.tsx</strong> : Affiche une question de quiz/tournoi (format canonique)</li><li><strong>QuestionCard.tsx</strong> : Carte interactive pour les questions de quiz/tournoi</li><li><strong>TournamentQuestionCard.tsx</strong> : Carte spécialisée pour les questions de tournoi</li><li><strong>DraggableQuestionsList.tsx</strong> : Dashboard professeur, gestion drag-and-drop des questions</li><li><strong>SortableQuestion.tsx</strong> : Question individuelle draggable pour réordonnancement</li><li><strong>QuestionSelector.tsx</strong> : Sélection/filtrage des questions pour quiz/tournois</li><li><strong>QuizList.tsx</strong> : Liste des quiz disponibles</li><li><strong>TournamentTimer.tsx</strong> : Chronomètre pour les questions de tournoi</li><li><strong>AnswerFeedbackOverlay.tsx</strong> : Affiche le feedback après réponse</li><li><strong>GoodAnswer.tsx / WrongAnswer.tsx</strong> : Icônes animées de feedback correct/incorrect</li><li><strong>TeacherDashboardClient.tsx</strong> : Interface client du dashboard professeur</li><li><strong>TeacherProjectionClient.tsx</strong> : Interface de projection pour les enseignants</li></ul><h4 id="composants-ui-utilitaires" tabindex="-1"><a class="header-anchor" href="#composants-ui-utilitaires"><span>Composants UI &amp; utilitaires</span></a></h4><ul><li><strong>Snackbar.tsx</strong> : Notifications toast pour le feedback utilisateur</li><li><strong>ConfirmationModal.tsx / ConfirmDialog.tsx</strong> : Dialogues modaux de confirmation et avertissement</li><li><strong>CustomDropdown.tsx / MultiSelectDropdown.tsx / EnhancedMultiSelectDropdown.tsx</strong> : Dropdowns personnalisés (multi-)sélection</li><li><strong>AvatarSelector.tsx / ui/AvatarGrid.tsx</strong> : Grilles de sélection d&#39;avatar pour profils</li><li><strong>MathJaxWrapper.tsx</strong> : Rendu LaTeX/MathJax dans les questions et explications</li><li><strong>ZoomControls.tsx</strong> : Contrôles UI pour zoomer le contenu</li><li><strong>Trophy.tsx</strong> : Icône animée de trophée pour récompenses</li><li><strong>InfinitySpin.tsx</strong> : Spinner de chargement animé</li><li><strong>CodeManager.tsx</strong> : Gestion de génération et mise à jour des codes tournoi/quiz</li><li><strong>LoadingScreen.tsx</strong> : Écran de chargement</li><li><strong>ErrorBoundary.tsx</strong> : Gestionnaire d&#39;erreurs React</li><li><strong>StatisticsChart.tsx / StatisticsChartImpl.tsx</strong> : Graphiques de statistiques</li><li><strong>QrCodeWithLogo.tsx</strong> : Génération de QR codes avec logo</li></ul><h4 id="profil-authentification" tabindex="-1"><a class="header-anchor" href="#profil-authentification"><span>Profil &amp; authentification</span></a></h4><ul><li><strong>profile/ProfileForm.tsx</strong> : Formulaire d&#39;édition de profil utilisateur</li><li><strong>profile/AccountUpgradeForm.tsx / TeacherUpgradeForm.tsx</strong> : Flux de mise à niveau de compte</li><li><strong>auth/GuestForm.tsx / GuestUpgradeForm.tsx / StudentAuthForm.tsx</strong> : Formulaires d&#39;authentification et inscription</li><li><strong>auth/AuthModeToggle.tsx</strong> : Bascule entre modes d&#39;authentification</li><li><strong>AuthErrorBanner.tsx</strong> : Bannière d&#39;erreur d&#39;authentification</li></ul><h4 id="tests" tabindex="-1"><a class="header-anchor" href="#tests"><span>Tests</span></a></h4><ul><li><strong><strong>tests</strong>/</strong> : Tests unitaires des composants (ex: AppNav, BasicButton)</li></ul><p><em>Pour les props détaillées et l&#39;utilisation, voir le code source dans <code>frontend/src/components/</code> et sous-dossiers.</em></p><h3 id="backend-node-js" tabindex="-1"><a class="header-anchor" href="#backend-node-js"><span>Backend (Node.js)</span></a></h3><p>Le backend suit une architecture en couches avec séparation des responsabilités :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">backend/src/</span>
<span class="line">├── api/             # Routes REST API</span>
<span class="line">├── sockets/         # Gestionnaires Socket.IO</span>
<span class="line">├── core/            # Services métier</span>
<span class="line">│   ├── services/    # Services (Scoring, Timer, etc.)</span>
<span class="line">│   └── models/      # Modèles de données</span>
<span class="line">├── db/              # Accès base de données (Prisma)</span>
<span class="line">├── middleware/      # Middlewares Express</span>
<span class="line">└── utils/           # Utilitaires</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Technologies clés :</strong></p><ul><li><strong>Node.js</strong> avec TypeScript</li><li><strong>Express.js</strong> pour l&#39;API REST</li><li><strong>Socket.IO</strong> pour la communication temps réel</li><li><strong>Prisma</strong> comme ORM</li><li><strong>Redis</strong> pour le cache et les sessions</li><li><strong>JWT</strong> pour l&#39;authentification</li></ul><h3 id="base-de-donnees-postgresql" tabindex="-1"><a class="header-anchor" href="#base-de-donnees-postgresql"><span>Base de données (PostgreSQL)</span></a></h3><p>La base de données utilise PostgreSQL avec Prisma comme ORM :</p><ul><li><strong>GameTemplate</strong> : Modèles de quiz/tournois</li><li><strong>GameInstance</strong> : Instances de parties en cours</li><li><strong>User</strong> : Utilisateurs (élèves/professeurs)</li><li><strong>Question</strong> : Questions (QCM, numériques)</li><li><strong>GameParticipant</strong> : Participants aux parties</li></ul><h3 id="communication-temps-reel" tabindex="-1"><a class="header-anchor" href="#communication-temps-reel"><span>Communication temps réel</span></a></h3><p>MathQuest utilise Socket.IO pour la communication bidirectionnelle :</p><ul><li><strong>Événements client→serveur</strong> : Réponses aux questions, rejoindre une partie</li><li><strong>Événements serveur→client</strong> : Mise à jour du leaderboard, nouvelle question</li><li><strong>Rooms Socket.IO</strong> : Isolation des parties par code d&#39;accès</li></ul><h3 id="cache-et-sessions-redis" tabindex="-1"><a class="header-anchor" href="#cache-et-sessions-redis"><span>Cache et sessions (Redis)</span></a></h3><p>Redis est utilisé pour :</p><ul><li><strong>Sessions utilisateur</strong> : Gestion des sessions authentifiées</li><li><strong>État des parties</strong> : Stockage temporaire de l&#39;état des quiz</li><li><strong>Timers</strong> : Gestion des chronomètres côté serveur</li><li><strong>Cache des questions</strong> : Amélioration des performances</li></ul><h2 id="flux-de-donnees-typique" tabindex="-1"><a class="header-anchor" href="#flux-de-donnees-typique"><span>Flux de données typique</span></a></h2><h3 id="creation-d-un-quiz" tabindex="-1"><a class="header-anchor" href="#creation-d-un-quiz"><span>Création d&#39;un quiz</span></a></h3><ol><li><strong>Frontend</strong> : Utilisateur crée un GameTemplate</li><li><strong>Backend</strong> : Validation et sauvegarde en base</li><li><strong>Database</strong> : Stockage du template avec questions associées</li></ol><h3 id="demarrage-d-un-quiz" tabindex="-1"><a class="header-anchor" href="#demarrage-d-un-quiz"><span>Démarrage d&#39;un quiz</span></a></h3><ol><li><strong>Frontend</strong> : Professeur lance le quiz</li><li><strong>Backend</strong> : Création d&#39;une GameInstance</li><li><strong>Socket.IO</strong> : Notification à tous les participants</li><li><strong>Redis</strong> : Initialisation des timers et état de partie</li></ol><h3 id="reponse-a-une-question" tabindex="-1"><a class="header-anchor" href="#reponse-a-une-question"><span>Réponse à une question</span></a></h3><ol><li><strong>Frontend</strong> : Élève soumet sa réponse</li><li><strong>Socket.IO</strong> : Transmission au backend</li><li><strong>Backend</strong> : Validation et calcul du score</li><li><strong>Database</strong> : Mise à jour du score du participant</li><li><strong>Socket.IO</strong> : Diffusion du leaderboard mis à jour</li></ol><h2 id="securite" tabindex="-1"><a class="header-anchor" href="#securite"><span>Sécurité</span></a></h2><ul><li><strong>Authentification JWT</strong> avec refresh tokens</li><li><strong>Validation des entrées</strong> avec Zod schemas</li><li><strong>Rate limiting</strong> sur les API</li><li><strong>CORS</strong> configuré pour les origines autorisées</li><li><strong>HTTPS</strong> obligatoire en production</li></ul><h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h2><ul><li><strong>Cache Redis</strong> pour les données fréquemment accédées</li><li><strong>Lazy loading</strong> des composants React</li><li><strong>Optimisation des images</strong> avec Next.js</li><li><strong>Compression</strong> des réponses HTTP</li><li><strong>Pooling de connexions</strong> base de données</li></ul>`,48)]))}const c=s(t,[["render",r]]),d=JSON.parse('{"path":"/details-techniques/architecture.html","title":"Architecture générale","lang":"fr-FR","frontmatter":{},"git":{"updatedTime":1758653778000,"contributors":[{"name":"alexisflesch","username":"alexisflesch","email":"alexis.flesch@gmail.com","commits":2,"url":"https://github.com/alexisflesch"}],"changelog":[{"hash":"2d4e41991ff701dd2a002fc859b089b4ffdc1ebc","time":1758653778000,"email":"alexis.flesch@gmail.com","author":"alexisflesch","message":"doc update"},{"hash":"8fbb71211cc25ed6748dfb46362eb2796047c9da","time":1758286875000,"email":"alexis.flesch@gmail.com","author":"alexisflesch","message":"updating doc"}]},"filePathRelative":"details-techniques/architecture.md"}');export{c as comp,d as data};
