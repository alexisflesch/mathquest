// Generated by ts-to-zod
import { z } from "zod";

export const chronoSchema = z.object({
  timeLeftMs: z.number().nullable(),
  running: z.boolean(),
  status: z
    .union([z.literal("play"), z.literal("pause"), z.literal("stop")])
    .optional(),
});

export const questionTimerSchema = z.object({
  status: z.union([z.literal("play"), z.literal("pause"), z.literal("stop")]),
  timeLeftMs: z.number(),
  initialTimeMs: z.number(),
  timestamp: z.number().nullable(),
});

const questionSchema = z.any();

export const baseQuizStateSchema = z.object({
  questions: z.array(questionSchema),
  chrono: chronoSchema,
  locked: z.boolean(),
  ended: z.boolean(),
  currentQuestionidx: z.number().optional().nullable(),
});

export const extendedQuizStateSchema = baseQuizStateSchema.extend({
  id: z.string().optional(),
  quizId: z.string().optional(),
  currentQuestionUid: z.string().nullable(),
  stats: z.record(z.any()).optional(),
  profSocketId: z.string().optional().nullable(),
  profTeacherId: z.string().optional(),
  timerStatus: z
    .union([z.literal("play"), z.literal("pause"), z.literal("stop")])
    .optional(),
  timerQuestionUid: z.string().optional().nullable(),
  timerTimeLeftMs: z.number().optional().nullable(),
  timerTimestamp: z.number().optional().nullable(),
  timerInitialValueMs: z.number().optional().nullable(),
  tournament_code: z.string().optional().nullable(),
  connectedSockets: z.set(z.string()).optional(),
  questionTimers: z.record(questionTimerSchema).optional(),
  pauseHandled: z.number().optional(),
  resumeHandled: z.number().optional(),
  lockedQuestions: z.record(z.boolean()).optional(),
  socketToJoueur: z.record(z.string()).optional(),
  participants: z.record(z.any()).optional(),
  askedQuestions: z.set(z.string()).optional(),
});
