// Generated by ts-to-zod
import { z } from "zod";

// Define a proper base question schema instead of z.any() which doesn't have extend
const baseQuestionSchema = z.object({
  uid: z.string().optional(), // Assuming uid might be part of a full question object later
});

export const questionSchema = baseQuestionSchema.extend({
  title: z.string().optional(),
  text: z.string({ required_error: "Question text is required" }), // Renamed from 'question' and made required
  answerOptions: z.array(z.string(), { required_error: "Answer options are required" }),
  correctAnswers: z.array(z.boolean(), { required_error: "Correct answers are required" }),
  questionType: z.string({ required_error: "Question type is required" }),
  discipline: z.string({ required_error: "Discipline is required" }),
  themes: z.array(z.string()).optional(),
  difficulty: z.number().optional(),
  gradeLevel: z.string().optional(),
  author: z.string().optional(),
  explanation: z.string().optional(),
  tags: z.array(z.string()).optional(),
  isHidden: z.boolean().optional(), // Renamed from 'hidden'
  durationMs: z.number({ required_error: "durationMs is required" }) // Canonical timer field
});

export type Question = z.infer<typeof questionSchema>;

// Schema for creating a question, essentially the same as questionSchema but without uid if it's auto-generated
export const questionCreationSchema = questionSchema.omit({ uid: true });
export type QuestionCreationData = z.infer<typeof questionCreationSchema>;
