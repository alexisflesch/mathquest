// Generated by ts-to-zod
import { z } from "zod";

// Base question schema with common fields
const baseQuestionSchema = z.object({
  uid: z.string().optional(),
  title: z.string().nullable().optional(), // Allow null from database
  text: z.string({ required_error: "Question text is required" }),
  questionType: z.string({ required_error: "Question type is required" }),
  discipline: z.string({ required_error: "Discipline is required" }),
  themes: z.array(z.string()).optional(),
  difficulty: z.number().optional(),
  gradeLevel: z.string().optional(),
  author: z.string().nullable().optional(), // Allow null from database
  explanation: z.string().nullable().optional(), // Allow null from database
  tags: z.array(z.string()).optional(),
  excludedFrom: z.array(z.string()).optional(),
  durationMs: z.number({ required_error: "durationMs is required" })
});

// Multiple choice question data schema
const multipleChoiceQuestionDataSchema = z.object({
  answerOptions: z.array(z.string(), { required_error: "Answer options are required" }),
  correctAnswers: z.array(z.boolean(), { required_error: "Correct answers are required" })
});

// Numeric question data schema
const numericQuestionDataSchema = z.object({
  correctAnswer: z.number({ required_error: "Correct answer is required" }),
  tolerance: z.number().nullable().optional(), // Allow null from database
  unit: z.string().nullable().optional() // Allow null values from database
});

// Raw polymorphic question schema (without refinement)
const rawQuestionSchema = baseQuestionSchema.extend({
  // Polymorphic relations - only one should be populated
  multipleChoiceQuestion: multipleChoiceQuestionDataSchema.optional(),
  numericQuestion: numericQuestionDataSchema.optional(),

  // Legacy fields for backward compatibility (optional)
  answerOptions: z.array(z.string()).optional(),
  correctAnswers: z.array(z.boolean()).optional()
});

// Polymorphic question schema with validation
export const questionSchema = rawQuestionSchema.refine((data) => {
  // Ensure at least one question type data is present
  if (data.questionType === 'multipleChoice') {
    return !!(data.multipleChoiceQuestion || (data.answerOptions && data.correctAnswers));
  }
  if (data.questionType === 'numeric') {
    return !!data.numericQuestion;
  }
  return true;
}, {
  message: "Question must have appropriate type-specific data"
});

export type Question = z.infer<typeof rawQuestionSchema>;

// Schema for creating a question, essentially the same as rawQuestionSchema but without uid if it's auto-generated
export const questionCreationSchema = rawQuestionSchema.omit({ uid: true });
export type QuestionCreationData = z.infer<typeof questionCreationSchema>;

// Schema for partial updates (without refinement to allow .partial() method)
export const questionUpdateSchema = rawQuestionSchema.partial();
export type QuestionUpdateData = z.infer<typeof questionUpdateSchema>;
