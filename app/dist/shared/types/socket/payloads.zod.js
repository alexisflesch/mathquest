"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resumeTournamentPayloadSchema = exports.pauseTournamentPayloadSchema = exports.startTournamentPayloadSchema = exports.gameTimerUpdatePayloadSchema = exports.quizTimerActionPayloadSchema = exports.updateAvatarPayloadSchema = exports.updateTournamentCodePayloadSchema = exports.tournamentAnswerPayloadSchema = exports.joinTournamentPayloadSchema = exports.pauseResumePayloadSchema = exports.getQuizStatePayloadSchema = exports.joinQuizPayloadSchema = exports.closeQuestionPayloadSchema = exports.endQuizPayloadSchema = exports.lockUnlockPayloadSchema = exports.setTimerPayloadSchema = exports.timerActionPayloadSchema = exports.setQuestionPayloadSchema = void 0;
// Generated by ts-to-zod
const zod_1 = require("zod");
exports.setQuestionPayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    questionUid: zod_1.z.string(),
    questionIdx: zod_1.z.number().optional(),
    teacherId: zod_1.z.string().optional(),
    tournamentCode: zod_1.z.string().optional(),
});
exports.timerActionPayloadSchema = zod_1.z.object({
    status: zod_1.z.union([zod_1.z.literal("play"), zod_1.z.literal("pause"), zod_1.z.literal("stop")]),
    questionUid: zod_1.z.string(),
    timeLeftMs: zod_1.z.number().optional(),
    quizId: zod_1.z.string(),
    teacherId: zod_1.z.string().optional(),
    tournamentCode: zod_1.z.string().optional(),
});
exports.setTimerPayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    timeLeftMs: zod_1.z.number(),
    teacherId: zod_1.z.string().optional(),
    tournamentCode: zod_1.z.string().optional(),
    questionUid: zod_1.z.string().optional(),
});
exports.lockUnlockPayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    teacherId: zod_1.z.string().optional(),
    tournamentCode: zod_1.z.string().optional(),
});
exports.endQuizPayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    teacherId: zod_1.z.string().optional(),
    tournamentCode: zod_1.z.string().optional(),
    forceEnd: zod_1.z.boolean().optional(),
});
exports.closeQuestionPayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    questionUid: zod_1.z.string(),
    teacherId: zod_1.z.string().optional(),
});
exports.joinQuizPayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    role: zod_1.z.union([
        zod_1.z.literal("teacher"),
        zod_1.z.literal("student"),
        zod_1.z.literal("projector"),
    ]),
    teacherId: zod_1.z.string().optional(),
    studentId: zod_1.z.string().optional(),
});
exports.getQuizStatePayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
});
exports.pauseResumePayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    teacherId: zod_1.z.string().optional(),
    tournamentCode: zod_1.z.string().optional(),
});
exports.joinTournamentPayloadSchema = zod_1.z.object({
    code: zod_1.z.string(),
    username: zod_1.z.string().optional(),
    avatar: zod_1.z.string().optional(),
    isDeferred: zod_1.z.boolean().optional(),
    userId: zod_1.z.string().optional(),
    classId: zod_1.z.string().optional(),
    cookieId: zod_1.z.string().optional(),
});
exports.tournamentAnswerPayloadSchema = zod_1.z.object({
    code: zod_1.z.string(),
    questionUid: zod_1.z.string(),
    answerIdx: zod_1.z.union([zod_1.z.number(), zod_1.z.array(zod_1.z.number())]),
    clientTimestamp: zod_1.z.number(),
    isDeferred: zod_1.z.boolean().optional(),
});
exports.updateTournamentCodePayloadSchema = zod_1.z.object({
    quizId: zod_1.z.string(),
    newCode: zod_1.z.string(),
    teacherId: zod_1.z.string().optional(),
});
exports.updateAvatarPayloadSchema = zod_1.z.object({
    tournamentCode: zod_1.z.string(),
    newAvatar: zod_1.z.string(),
});
exports.quizTimerActionPayloadSchema = zod_1.z.object({
    gameId: zod_1.z.string(),
    action: zod_1.z.union([
        zod_1.z.literal("start"),
        zod_1.z.literal("pause"),
        zod_1.z.literal("resume"),
        zod_1.z.literal("stop"),
        zod_1.z.literal("set_duration"),
    ]),
    questionUid: zod_1.z.string().optional(),
    durationMs: zod_1.z.number().optional(),
});
exports.gameTimerUpdatePayloadSchema = zod_1.z.object({
    questionUid: zod_1.z.string().optional(),
    timer: zod_1.z
        .object({
        startedAt: zod_1.z.number().optional(),
        durationMs: zod_1.z.number().optional(),
        isPaused: zod_1.z.boolean().optional(),
        timeRemainingMs: zod_1.z.number().optional(),
    })
        .optional(),
});
exports.startTournamentPayloadSchema = zod_1.z.object({
    code: zod_1.z.string(),
    teacherId: zod_1.z.string(),
});
exports.pauseTournamentPayloadSchema = zod_1.z.object({
    code: zod_1.z.string(),
});
exports.resumeTournamentPayloadSchema = zod_1.z.object({
    code: zod_1.z.string(),
});
