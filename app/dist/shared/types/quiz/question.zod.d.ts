import { z } from "zod";
export declare const questionSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
} & {
    title: z.ZodOptional<z.ZodString>;
    text: z.ZodString;
    answerOptions: z.ZodArray<z.ZodString, "many">;
    correctAnswers: z.ZodArray<z.ZodBoolean, "many">;
    questionType: z.ZodString;
    discipline: z.ZodString;
    themes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    difficulty: z.ZodOptional<z.ZodNumber>;
    gradeLevel: z.ZodOptional<z.ZodString>;
    author: z.ZodOptional<z.ZodString>;
    explanation: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    isHidden: z.ZodOptional<z.ZodBoolean>;
    durationMs: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    text: string;
    answerOptions: string[];
    correctAnswers: boolean[];
    questionType: string;
    discipline: string;
    durationMs: number;
    uid?: string | undefined;
    title?: string | undefined;
    themes?: string[] | undefined;
    difficulty?: number | undefined;
    gradeLevel?: string | undefined;
    author?: string | undefined;
    explanation?: string | undefined;
    tags?: string[] | undefined;
    isHidden?: boolean | undefined;
}, {
    text: string;
    answerOptions: string[];
    correctAnswers: boolean[];
    questionType: string;
    discipline: string;
    durationMs: number;
    uid?: string | undefined;
    title?: string | undefined;
    themes?: string[] | undefined;
    difficulty?: number | undefined;
    gradeLevel?: string | undefined;
    author?: string | undefined;
    explanation?: string | undefined;
    tags?: string[] | undefined;
    isHidden?: boolean | undefined;
}>;
export type Question = z.infer<typeof questionSchema>;
export declare const questionCreationSchema: z.ZodObject<Omit<{
    uid: z.ZodOptional<z.ZodString>;
} & {
    title: z.ZodOptional<z.ZodString>;
    text: z.ZodString;
    answerOptions: z.ZodArray<z.ZodString, "many">;
    correctAnswers: z.ZodArray<z.ZodBoolean, "many">;
    questionType: z.ZodString;
    discipline: z.ZodString;
    themes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    difficulty: z.ZodOptional<z.ZodNumber>;
    gradeLevel: z.ZodOptional<z.ZodString>;
    author: z.ZodOptional<z.ZodString>;
    explanation: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    isHidden: z.ZodOptional<z.ZodBoolean>;
    durationMs: z.ZodNumber;
}, "uid">, "strip", z.ZodTypeAny, {
    text: string;
    answerOptions: string[];
    correctAnswers: boolean[];
    questionType: string;
    discipline: string;
    durationMs: number;
    title?: string | undefined;
    themes?: string[] | undefined;
    difficulty?: number | undefined;
    gradeLevel?: string | undefined;
    author?: string | undefined;
    explanation?: string | undefined;
    tags?: string[] | undefined;
    isHidden?: boolean | undefined;
}, {
    text: string;
    answerOptions: string[];
    correctAnswers: boolean[];
    questionType: string;
    discipline: string;
    durationMs: number;
    title?: string | undefined;
    themes?: string[] | undefined;
    difficulty?: number | undefined;
    gradeLevel?: string | undefined;
    author?: string | undefined;
    explanation?: string | undefined;
    tags?: string[] | undefined;
    isHidden?: boolean | undefined;
}>;
export type QuestionCreationData = z.infer<typeof questionCreationSchema>;
