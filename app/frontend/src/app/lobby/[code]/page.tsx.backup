/**
 * Lobby Page Component
 * 
 * This component manages the tournament lobby/waiting room where participants
 * gather before the tournament begins. Key functionalities include:
 * 
 * - Socket.IO connection for real-time participant updates
 * - Display of connected participants with avatars
 * - Tournament start controls (for tournament creator only)
 * - Countdown animation before tournament starts
 * - Tournament code sharing
 * - Identity management for teachers and students
 * 
 * The lobby handles the transition between tournament creation and actual
 * tournament participation, and ensures all participants are properly
 * redirected when the tournament begins.
 */

"use client";
import React, { useState, useEffect, useRef, useCallback } from "react";
import { useParams, useRouter } from "next/navigation";
import { io, Socket } from "socket.io-client";
import { useAuth } from '@/components/AuthProvider';
import Image from 'next/image';
import { Share2 } from "lucide-react";
import { createLogger } from '@/clientLogger';
import { SOCKET_CONFIG } from '@/config';
import { SOCKET_EVENTS } from '@shared/types/socket/events';
import { makeApiRequest } from '@/config/api';

// Game state interface for lobby status checking
interface GameState {
    status?: string;
    currentQuestionIndex?: number;
    participants?: Array<{
        id: string;
        username: string;
        avatar?: string;
        score?: number;
    }>;
    timer?: {
        timeLeft: number;
        running: boolean;
    };
    question?: {
        uid: string;
        text: string;
        type: string;
    };
}

// Tournament status response interface
interface TournamentStatusResponse {
    status: string;
    statut: string;
    currentQuestionIndex?: number;
    isLive?: boolean;
    gameState?: GameState;
}

// Create a logger for this component
const logger = createLogger('LobbyPage');

export default function LobbyPage() {
    const { code } = useParams();
    const router = useRouter();
    const { isTeacher, isStudent, isLoading, userProfile, userState } = useAuth();
    const [isCreator, setIsCreator] = useState(true); // TODO: Replace with real logic
    const [countdown, setCountdown] = useState<number | null>(null);
    const socketRef = useRef<Socket | null>(null);
    const [participants, setParticipants] = useState<{ id: string; username: string; avatar: string }[]>([]);
    const [creator, setCreator] = useState<{ username: string; avatar: string } | null>(null);
    const [isQuizLinked, setIsQuizLinked] = useState<boolean | null>(null);

    // Authentication guard - redirect if user is not properly authenticated
    useEffect(() => {
        if (isLoading) {
            // Still checking authentication, wait
            return;
        }

        if (userState === 'anonymous') {
            logger.warn('User is anonymous, redirecting to home page');
            router.push('/');
            return;
        }

        if (!userProfile.username || !userProfile.avatar) {
            logger.warn('User profile incomplete, redirecting to home page', { userProfile });
            router.push('/');
            return;
        }

        logger.info('User authentication verified for lobby', { userState, userProfile });
    }, [isLoading, userState, userProfile, router]);

    // Show loading while authentication is being checked
    if (isLoading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
                    <p className="mt-4 text-lg text-gray-600">V√©rification de l'authentification...</p>
                </div>
            </div>
        );
    }

    // Show loading if user is anonymous (will redirect shortly)
    if (userState === 'anonymous' || !userProfile.username || !userProfile.avatar) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
                    <p className="mt-4 text-lg text-gray-600">Redirection...</p>
                </div>
            </div>
        );
    }

    // Function to check tournament status and redirect if needed
    const checkTournamentStatus = useCallback(async () => {
        try {
            const status = await makeApiRequest<TournamentStatusResponse>(`games/${code}/state`);

            if (status.statut === 'termin√©') {
                logger.info(`Tournament ${code} is finished, redirecting to leaderboard`);
                router.replace(`/leaderboard/${code}`);
            } else if (status.statut === 'en cours') {
                logger.info(`Tournament ${code} is already in progress, redirecting`);
                if (socketRef.current) {
                    socketRef.current.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { code });
                }

                // For games in progress, redirect immediately to live page
                // The game state data already provides all needed information
                router.replace(`/live/${code}`);
            }
        } catch (err) {
            logger.error(`Error checking tournament status: ${err}`);
        }
    }, [code, router]);

    // Get correct username/avatar for current session
    const getCurrentIdentity = useCallback(() => {
        if (typeof window === 'undefined') {
            logger.debug('Not running in browser, window is undefined');
            return null;
        }

        logger.debug('Identity check', { userState, userProfile });

        // Check if user has a valid profile with username and avatar
        if (userProfile.username && userProfile.avatar) {
            logger.debug('User identity from AuthProvider', {
                username: userProfile.username,
                avatar: userProfile.avatar
            });
            return {
                username: userProfile.username,
                avatar: userProfile.avatar
            };
        }

        logger.warn('No valid identity found in AuthProvider');
        return null;
    }, [userState, userProfile]);

    // Fetch tournament and creator info
    useEffect(() => {
        async function fetchCreator() {
            try {
                const status = await makeApiRequest<TournamentStatusResponse>(`games/${code}/state`);
                if (status.statut === 'termin√©') {
                    router.replace(`/leaderboard/${code}`);
                    return;
                }
                if (status.statut === 'en cours') {
                    router.replace(`/live/${code}`);
                    return;
                }

                // Get the game instance details instead of tournament
                const gameInstance = await makeApiRequest<{
                    gameInstance: {
                        id: string;
                        accessCode: string;
                        status?: string;
                        initiatorUserId?: string;
                        name: string;
                    }
                }>(`games/${code}`);
                logger.debug("Game instance fetched", {
                    id: gameInstance.gameInstance.id,
                    accessCode: gameInstance.gameInstance.accessCode,
                    status: gameInstance.gameInstance.status
                });

                // If the game is already started, redirect to game page
                if (gameInstance.gameInstance.status && gameInstance.gameInstance.status !== 'pending') {
                    router.replace(`/live/${code}`);
                    return;
                }

                let creatorData = null;
                if (gameInstance.gameInstance.initiatorUserId) {
                    // Try to fetch user info - this might need adjustment based on your user API
                    logger.debug("Fetching game creator", { id: gameInstance.gameInstance.initiatorUserId });
                    try {
                        // For now, use a placeholder since we don't know the exact user API structure
                        // This can be updated when the user API is available
                        creatorData = { username: "Creator", avatar: "üê±" };
                    } catch (error) {
                        logger.error("Error fetching game creator:", error);
                        creatorData = { username: "Unknown", avatar: "üê±" };
                    }
                } else {
                    // No creator found
                    logger.warn("No creator found in game instance");
                    creatorData = { username: "Unknown", avatar: "üê±" };
                }
                if (creatorData) setCreator(creatorData);
            } catch (error) {
                logger.error("Error fetching tournament info:", error);
            }
        }
        fetchCreator();
    }, [code, router]);

    // Determine if the current user is the creator
    useEffect(() => {
        if (!creator) return;
        const identity = getCurrentIdentity();
        setIsCreator(
            !!identity &&
            identity.username === creator.username &&
            identity.avatar === creator.avatar
        );
    }, [creator, getCurrentIdentity]);

    useEffect(() => {
        // Connect to socket.io server
        logger.info('Creating socket connection with config:', SOCKET_CONFIG);
        // Use the centralized SOCKET_CONFIG without local overrides for transports and timeout
        const socket = io(SOCKET_CONFIG.url, {
            ...SOCKET_CONFIG,
        });
        socketRef.current = socket;

        // Handle connection errors and reconnection
        socket.on(SOCKET_EVENTS.CONNECT_ERROR, (err) => {
            logger.error(`Socket connection error: ${err.message}`);
        });

        socket.on(SOCKET_EVENTS.DISCONNECT, (reason) => {
            logger.warn(`Socket disconnected: ${reason}`);
            // Check tournament status on disconnect to ensure we don't miss redirection
            setTimeout(checkTournamentStatus, 1000);
        });

        socket.on(SOCKET_EVENTS.GAME.RECONNECT, (attemptNumber) => {
            logger.info(`Socket reconnected after ${attemptNumber} attempts`);
            // Re-join room after reconnection
            const identity = getCurrentIdentity();
            if (identity) {
                // Use userId from AuthProvider, fallback to cookieId, then temp ID
                const userId = userProfile.userId || userProfile.cookieId || `temp_${socket.id}`;
                socket.emit(SOCKET_EVENTS.LOBBY.JOIN_LOBBY, {
                    accessCode: code,
                    userId,
                    username: identity.username,
                    avatarEmoji: identity.avatar,
                });
                // Check tournament status after reconnect
                checkTournamentStatus();
            }
        });

        // Join the lobby room with correct identity
        const identity = getCurrentIdentity();
        if (!identity) {
            logger.error('No identity found, cannot join lobby. Redirecting to home.');
            router.push('/');
            return;
        }

        // Get userId from AuthProvider (userId for authenticated users, cookieId for guests)
        const userId = userProfile.userId || userProfile.cookieId || `temp_${socket.id}`;
        logger.debug('userId before join_lobby', { userId, userProfile });

        socket.emit(SOCKET_EVENTS.LOBBY.JOIN_LOBBY, {
            accessCode: code,
            userId,
            username: identity.username,
            avatarEmoji: identity.avatar,
        });

        // Debug: log after join_lobby
        logger.info("Joined lobby", { code });

        // Request the current participants list
        socket.emit(SOCKET_EVENTS.LOBBY.GET_PARTICIPANTS, { accessCode: code });

        // Listen for the full participants list
        socket.on(SOCKET_EVENTS.LOBBY.PARTICIPANTS_LIST, (data) => {
            if (Array.isArray(data)) {
                setParticipants(data);
                setIsQuizLinked(false); // fallback for old format
            } else {
                setParticipants(data.participants || []);
                setIsQuizLinked(data.isQuizLinked === undefined ? false : !!data.isQuizLinked);
            }
        });

        // Listen for participant join/leave events
        socket.on(SOCKET_EVENTS.LOBBY.PARTICIPANT_JOINED, (participant) => {
            setParticipants((prev) => {
                if (prev.some((p) => p.id === participant.id)) return prev;
                return [...prev, participant];
            });
            logger.debug("Participant joined", { id: participant.id, username: participant.username });
        });

        socket.on(SOCKET_EVENTS.LOBBY.PARTICIPANT_LEFT, (participant) => {
            setParticipants((prev) => prev.filter((p) => p.id !== participant.id));
            logger.debug("Participant left", { id: participant.id, username: participant.username });
        });

        // Listen for redirect_to_game event (new backend event for game start)
        socket.on(SOCKET_EVENTS.LOBBY.REDIRECT_TO_GAME, ({ accessCode, gameId }) => {
            const targetCode = accessCode || code;
            logger.info(`Received redirect_to_game event, redirecting immediately to ${targetCode}`);

            // Add direct console.log for visibility in browser console
            console.log(`%c‚ö†Ô∏è REDIRECT TO GAME EVENT RECEIVED! Redirecting to /live/${targetCode}`, 'background: #ff0000; color: white; font-size: 16px; padding: 5px;');

            // Force-leave the lobby room before redirecting
            socket.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { accessCode: targetCode });

            // Use immediate window.location navigation instead of Next.js router to ensure redirection
            console.log('Executing window.location navigation now...');
            window.location.href = `/live/${targetCode}`;

            // Also try the Next.js router as a fallback
            try {
                router.replace(`/live/${targetCode}`);
            } catch (err) {
                logger.error(`Router redirect error: ${err}`);
            }
        });

        // Listen for game_started event (new backend event)
        socket.on(SOCKET_EVENTS.LOBBY.GAME_STARTED, ({ accessCode, gameId }) => {
            const targetCode = accessCode || code;
            logger.info(`Game started (code: ${targetCode}), beginning countdown`);
            setCountdown(5);
            const interval = setInterval(() => {
                setCountdown((prev) => {
                    if (prev === null) return null;
                    if (prev <= 1) {
                        clearInterval(interval);
                        logger.info(`Countdown complete, will redirect to /live/${targetCode}`);

                        // Force-leave the lobby room before redirecting
                        socket.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { accessCode: targetCode });

                        // Use immediate window.location navigation for more reliable redirects
                        window.location.href = `/live/${targetCode}`;

                        // Also try router as fallback
                        try {
                            router.replace(`/live/${targetCode}`);
                        } catch (err) {
                            logger.error(`Router redirect error: ${err}`);
                        }

                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        });

        // Keep legacy support for old events during transition
        // Listen for redirect_to_tournament event (legacy support - immediate redirect for quiz-triggered tournaments)
        socket.on(SOCKET_EVENTS.TOURNAMENT.REDIRECT_TO_TOURNAMENT, ({ code: redirectCode }) => {
            const targetCode = redirectCode || code;
            logger.info(`Received redirect_to_tournament event, redirecting immediately to ${targetCode}`);

            // Add direct console.log for visibility in browser console
            console.log(`%c‚ö†Ô∏è REDIRECT EVENT RECEIVED! Redirecting to /live/${targetCode}`, 'background: #ff0000; color: white; font-size: 16px; padding: 5px;');

            // Force-leave the lobby room before redirecting
            socket.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { accessCode: targetCode });

            // Use immediate window.location navigation instead of Next.js router to ensure redirection
            console.log('Executing window.location navigation now...');
            window.location.href = `/live/${targetCode}`;

            // Also try the Next.js router as a fallback
            try {
                router.replace(`/live/${targetCode}`);
            } catch (err) {
                logger.error(`Router redirect error: ${err}`);
            }
        });

        // Additional check for tournament status on connection to catch cases where
        // the tournament started but we missed the start event

        // Check status initially
        checkTournamentStatus();

        // Listen for tournament_started event from server (legacy - normal tournaments with countdown)
        socket.on(SOCKET_EVENTS.TOURNAMENT.TOURNAMENT_STARTED, (data) => {
            const tournamentCode = data?.code || code; // Use provided code or current code
            logger.info(`Tournament started (code: ${tournamentCode}), beginning countdown`);
            setCountdown(5);
            const interval = setInterval(() => {
                setCountdown((prev) => {
                    if (prev === null) return null;
                    if (prev <= 1) {
                        clearInterval(interval);
                        logger.info(`Countdown complete, will redirect to /live/${tournamentCode}`);

                        // Force-leave the lobby room before redirecting
                        socket.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { accessCode: tournamentCode });

                        // Use immediate window.location navigation for more reliable redirects
                        window.location.href = `/live/${tournamentCode}`;

                        // Also try router as fallback
                        try {
                            router.replace(`/live/${tournamentCode}`);
                        } catch (err) {
                            logger.error(`Router redirect error: ${err}`);
                        }

                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        });

        // Listen for the event indicating the tournament already started
        socket.on(SOCKET_EVENTS.TOURNAMENT.TOURNAMENT_ALREADY_STARTED, ({ code: tournamentCode, status }) => {
            logger.info(`Received tournament_already_started event for code ${tournamentCode} with status ${status}. Redirecting...`);

            if (status === 'en cours') {
                // Use immediate window.location navigation for more reliable redirects
                logger.info(`Tournament ${tournamentCode} is in progress, forcing redirect to live page`);
                window.location.href = `/live/${tournamentCode}`;

                // Also try router as fallback
                try {
                    router.replace(`/live/${tournamentCode}`);
                } catch (err) {
                    logger.error(`Router redirect error: ${err}`);
                }
            } else if (status === 'termin√©') {
                // Redirect to leaderboard if finished
                logger.info(`Tournament ${tournamentCode} is finished, redirecting to leaderboard`);
                window.location.href = `/leaderboard/${tournamentCode}`;

                try {
                    router.replace(`/leaderboard/${tournamentCode}`);
                } catch (err) {
                    logger.error(`Router redirect error: ${err}`);
                }
            } else {
                // Fallback or error handling
                logger.warn(`Unexpected status received in tournament_already_started: ${status}`);
                window.location.href = '/';
            }
        });

        // Listen for potential lobby errors from the server
        socket.on(SOCKET_EVENTS.LOBBY.LOBBY_ERROR, ({ error, message }) => {
            logger.error(`Lobby error received: ${message} (${error})`);
            // TODO: Display this error to the user appropriately
            alert(`Erreur: ${message}`); // Simple alert for now
            router.replace('/'); // Redirect home on error
        });        // Debug: log all socket events
        socket.onAny((event, ...args) => {
            logger.debug(`Socket event: ${event}`, args);
        });

        // Add global notification handler to catch tournament notifications
        socket.on(SOCKET_EVENTS.TOURNAMENT.TOURNAMENT_NOTIFICATION, (data) => {
            logger.info(`Received tournament_notification: ${JSON.stringify(data)}`);

            if (data.type === "redirect" && data.code === code) {
                logger.info(`Global notification to redirect to tournament ${data.code}. isQuizMode=${data.isQuizMode}, immediate=${data.immediate}`);

                // Skip countdown for quiz mode - force an immediate redirect
                if (data.isQuizMode || data.immediate) {
                    logger.info(`QUIZ MODE REDIRECT: Forcing immediate redirect to /live/${data.code}`);
                    // Force-leave the lobby first
                    socket.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { accessCode: code });

                    // Force a hard navigation (most reliable)
                    window.location.href = `/live/${data.code}`;

                    try {
                        router.replace(`/live/${data.code}`);
                    } catch (err) {
                        logger.error(`Router redirect error: ${err}`);
                    }
                } else {
                    // For non-quiz tournaments, we might show countdown (handled by tournament_started event)
                    logger.info(`Regular tournament redirect notification received for code ${data.code}`);
                    window.location.href = `/live/${data.code}`;
                }
            }
        });

        // Add safeguards to explicitly ignore live tournament-specific events
        // that should not be processed in the lobby context
        socket.on(SOCKET_EVENTS.TOURNAMENT.TOURNAMENT_QUESTION, () => {
            // Explicitly ignore - these events should be handled in the live tournament page
            logger.warn("Received tournament_question event in lobby - ignoring");
        });

        socket.on(SOCKET_EVENTS.TOURNAMENT.TOURNAMENT_SET_TIMER, () => {
            // Explicitly ignore - these events should be handled in the live tournament page
            logger.warn("Received tournament_set_timer event in lobby - ignoring");
        });

        // Clean up on unmount
        return () => {
            socket.emit(SOCKET_EVENTS.LOBBY.LEAVE_LOBBY, { accessCode: code });
            socket.disconnect();
        };
    }, [code, userProfile, getCurrentIdentity, router, checkTournamentStatus]);

    useEffect(() => {
        if (countdown === 0) {
            // Redirect to tournament page when countdown ends
            logger.info(`Countdown reached zero, redirecting to live/${code}`);

            // Force redirect with window.location for reliability
            window.location.href = `/live/${code}`;

            // Also try Next.js router as backup
            try {
                router.replace(`/live/${code}`);
            } catch (err) {
                logger.error(`Router redirect error: ${err}`);
            }
        }
    }, [countdown, code, router]);

    useEffect(() => {
        if (!socketRef.current) {
            socketRef.current = io();
        }

        const socket = socketRef.current;

        // Listen for redirect_to_quiz event
        socket.on(SOCKET_EVENTS.LOBBY.REDIRECT_TO_QUIZ, ({ quizId }) => {
            logger.info(`Received redirect_to_quiz for quiz ${quizId}, redirecting...`);
            router.push(`/quiz/${quizId}`);
        });

        return () => {
            if (socket) {
                socket.off(SOCKET_EVENTS.LOBBY.REDIRECT_TO_QUIZ);
            }
        };
    }, [router]);

    // Add debug logging to see which events are received but don't add duplicate listeners
    useEffect(() => {
        if (!socketRef.current) return;

        const socket = socketRef.current;

        // Only add logging for events, not handlers
        socket.onAny((event, ...args) => {
            console.log(`[Lobby] Socket event received: ${event}`, args);
        });

        return () => {
            // Remove the debug listener on cleanup
            socket.offAny();
        };
    }, [socketRef]);

    // Handler for start button
    const handleStart = () => {
        if (isCreator && socketRef.current) {
            logger.info("Starting tournament", { code, socketConnected: socketRef.current.connected });
            // Updated to use new backend API payload
            socketRef.current.emit(SOCKET_EVENTS.TOURNAMENT.START_TOURNAMENT, { accessCode: code });
        }
    };

    // Component layout - Note: authentication is already handled in useEffect above
    // If we reach this point, user is authenticated

    if (countdown !== null) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
                <div className="text-center">
                    <div className="text-8xl font-bold text-blue-600 animate-pulse mb-4">
                        {countdown}
                    </div>
                    <p className="text-xl text-gray-700">Le tournoi commence dans...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
            <div className="max-w-4xl mx-auto">
                {/* Header */}
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <div className="flex items-center justify-between">
                        <div>
                            <h1 className="text-3xl font-bold text-gray-900">Salle d'attente</h1>
                            <p className="text-gray-600 mt-2">Code du tournoi: <span className="font-mono text-blue-600 text-lg">{code}</span></p>
                        </div>
                        <div className="flex items-center space-x-4">
                            <button
                                onClick={() => navigator.clipboard.writeText(code as string)}
                                className="flex items-center space-x-2 bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-lg transition-colors"
                            >
                                <Share2 size={20} />
                                <span>Partager</span>
                            </button>
                        </div>
                    </div>
                </div>

                {/* Creator Info */}
                {creator && (
                    <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                        <h2 className="text-xl font-semibold text-gray-900 mb-4">Cr√©ateur du tournoi</h2>
                        <div className="flex items-center space-x-3">
                            <div className="text-2xl">{creator.avatar}</div>
                            <span className="font-medium text-gray-900">{creator.username}</span>
                        </div>
                    </div>
                )}

                {/* Participants */}
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 className="text-xl font-semibold text-gray-900 mb-4">
                        Participants ({participants.length})
                    </h2>
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                        {participants.map((participant) => (
                            <div
                                key={participant.id}
                                className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg"
                            >
                                <div className="text-2xl">{participant.avatar}</div>
                                <span className="font-medium text-gray-900 truncate">
                                    {participant.username}
                                </span>
                            </div>
                        ))}
                    </div>
                    {participants.length === 0 && (
                        <p className="text-gray-500 text-center py-8">
                            En attente de participants...
                        </p>
                    )}
                </div>

                {/* Start Button */}
                {isCreator && (
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <div className="text-center">
                            <button
                                onClick={handleStart}
                                disabled={participants.length === 0}
                                className="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors"
                            >
                                Commencer le tournoi
                            </button>
                            {participants.length === 0 && (
                                <p className="text-gray-500 mt-2 text-sm">
                                    En attente de participants pour commencer
                                </p>
                            )}
                        </div>
                    </div>
                )}

                {/* Quiz Linked Indicator */}
                {isQuizLinked !== null && (
                    <div className="mt-4 text-center">
                        <p className="text-sm text-gray-600">
                            {isQuizLinked ? 'üîó Connect√© au quiz en direct' : 'üìù Tournoi autonome'}
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
}
