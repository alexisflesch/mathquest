"use client// Vrai symbole d'infini horizontal parfait (lemniscate/figure-8 classique)
const PATH_INFINITY = "M 50,36 C 50,36 50,20 65,20 C 80,20 80,35 65,35 C 80,50 80,65 65,65 C 50,65 50,50 50,50 C 50,50 50,65 35,65 C 20,65 20,50 35,35 C 20,20 20,35 35,35 C 35,35 50,36 50,36 Z";
// Vrai chiffre 3 classique, obtenu en ouvrant le 8 sur la gauche
const PATH_THREE = "M 40,20 L 70,20 C 80,20 80,30 70,30 L 50,30 L 50,40 C 60,40 80,40 80,50 C 80,65 60,70 50,70 L 40,70 L 40,60";mport { motion, useAnimation } from "framer-motion";
import { useEffect, useRef, useState } from "react";
import { interpolate } from "flubber";

// Durées (en secondes)
const DURATION_ROTATION = 1.2;
const DURATION_MORPH = 1.2;
const DURATION_SPINNER = 2.0;

// Lemniscate de Bernoulli (∞ classique, horizontale, centrée sur 50,50, puis pivotée)
// Source: https://commons.wikimedia.org/wiki/File:SVG_Lemniscate_of_Bernoulli.svg
const PATH_INFINITY = "M 30,50 C 30,30 70,30 70,50 C 70,70 30,70 30,50 Z";
// Chemin SVG d’un vrai « 3 » classique, centré et proportionné
const PATH_THREE = "M 35,35 Q 50,25 65,35 Q 75,45 65,55 Q 50,65 35,55 Q 25,45 35,35 M 65,35 Q 75,25 65,15 Q 50,5 35,15 Q 25,25 35,35";

interface InfinityCountDownProps {
    startAnimation: boolean;
}

const InfinityCountDown = ({ startAnimation }: InfinityCountDownProps) => {
    const [currentPath, setCurrentPath] = useState(PATH_INFINITY);
    const [rotation, setRotation] = useState(0);
    const spinnerControls = useAnimation();
    const groupControls = useAnimation();
    const pathRef = useRef<SVGPathElement>(null);

    // Animation principale : rotation puis morph
    useEffect(() => {
        if (!startAnimation) {
            setCurrentPath(PATH_INFINITY);
            setRotation(0);
            groupControls.set({ rotate: 0 });
            spinnerControls.stop();
            return;
        }
        // 1. Rotation
        groupControls.start({
            rotate: 90,
            transition: { duration: DURATION_ROTATION, ease: "easeInOut" },
        });
        setTimeout(() => {
            // 2. Morph
            const interpolator = interpolate(PATH_INFINITY, PATH_THREE, { maxSegmentLength: 2 });
            let frame = 0;
            const totalFrames = Math.round(60 * DURATION_MORPH);
            function animateMorph() {
                const t = frame / totalFrames;
                setCurrentPath(interpolator(t));
                frame++;
                if (frame <= totalFrames) {
                    requestAnimationFrame(animateMorph);
                } else {
                    setCurrentPath(PATH_THREE);
                }
            }
            animateMorph();
        }, DURATION_ROTATION * 1000);
    }, [startAnimation, groupControls, spinnerControls]);

    // Spinner qui suit le chemin courant
    useEffect(() => {
        if (!startAnimation || !pathRef.current) {
            spinnerControls.stop();
            return;
        }
        const pathEl = pathRef.current;
        try {
            pathEl.setAttribute("d", currentPath);
            const pathLength = pathEl.getTotalLength();
            if (pathLength > 0 && isFinite(pathLength)) {
                const keyframesX: number[] = [];
                const keyframesY: number[] = [];
                const N = 120;
                for (let i = 0; i <= N; i++) {
                    const pt = pathEl.getPointAtLength((i / N) * pathLength);
                    keyframesX.push(pt.x);
                    keyframesY.push(pt.y);
                }
                spinnerControls.start({
                    cx: keyframesX,
                    cy: keyframesY,
                    transition: {
                        duration: DURATION_SPINNER,
                        ease: "linear",
                        repeat: Infinity,
                        repeatType: currentPath === PATH_INFINITY ? "loop" : "reverse",
                    },
                });
            }
        } catch (e) {
            // ignore
        }
    }, [currentPath, startAnimation, spinnerControls]);

    return (
        <div className="flex items-center justify-center h-screen bg-black">
            <svg width={300} height={300} viewBox="0 0 100 100">
                <motion.g animate={groupControls} style={{ transformOrigin: "50px 50px" }}>
                    <motion.path
                        ref={pathRef}
                        d={currentPath}
                        stroke="#00FFAA"
                        strokeWidth={3}
                        fill="none"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                    />
                    <motion.circle
                        r={2.2}
                        fill="#FFD700"
                        animate={spinnerControls}
                        initial={{ cx: 50, cy: 50 }}
                    />
                </motion.g>
            </svg>
        </div>
    );
};

export default InfinityCountDown;
