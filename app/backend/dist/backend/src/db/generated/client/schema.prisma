generator client {
  provider = "prisma-client-js"
  output   = "../src/db/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String            @id @default(uuid())
  username                        String
  email                           String?           @unique
  passwordHash                    String?
  createdAt                       DateTime          @default(now())
  role                            UserRole
  resetToken                      String?           @map("reset_token")
  resetTokenExpiresAt             DateTime?         @map("reset_token_expires_at")
  avatarEmoji                     String?
  emailVerificationToken          String?           @map("email_verification_token")
  emailVerificationTokenExpiresAt DateTime?         @map("email_verification_token_expires_at")
  emailVerified                   Boolean?          @default(false) @map("email_verified")
  studentProfile                  StudentProfile?
  teacherProfile                  TeacherProfile?
  initiatedGameInstances          GameInstance[]    @relation("InitiatedGameInstancesByUser")
  gameParticipations              GameParticipant[]
  createdGameTemplates            GameTemplate[]    @relation("UserCreatedGameTemplates")
}

model TeacherProfile {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

model StudentProfile {
  id       String  @id
  cookieId String? @unique @map("cookie_id")
  user     User    @relation(fields: [id], references: [id])
}

model Question {
  uid                    String                    @id @default(uuid())
  title                  String?
  text                   String                    @map("question_text")
  questionType           String                    @map("question_type")
  discipline             String
  themes                 String[]
  difficulty             Int?
  gradeLevel             String?                   @map("grade_level")
  author                 String?
  explanation            String?
  tags                   String[]
  timeLimit              Int                       @map("time_limit_seconds")
  excludedFrom           String[]                  @default([]) @map("excluded_from")
  createdAt              DateTime                  @default(now()) @map("created_at")
  updatedAt              DateTime                  @updatedAt @map("updated_at")
  feedbackWaitTime       Int?
  isHidden               Boolean?                  @default(false) @map("is_hidden")
  multipleChoiceQuestion MultipleChoiceQuestion?
  numericQuestion        NumericQuestion?
  gameTemplates          QuestionsInGameTemplate[]

  @@map("questions")
}

model MultipleChoiceQuestion {
  questionUid    String    @id @map("question_uid")
  answerOptions  String[]  @map("answer_options")
  correctAnswers Boolean[] @map("correct_answers")
  question       Question  @relation(fields: [questionUid], references: [uid], onDelete: Cascade)

  @@map("multiple_choice_questions")
}

model NumericQuestion {
  questionUid   String   @id @map("question_uid")
  correctAnswer Float    @map("correct_answer")
  tolerance     Float?   @default(0) @map("tolerance")
  unit          String?  @map("unit")
  question      Question @relation(fields: [questionUid], references: [uid], onDelete: Cascade)

  @@map("numeric_questions")
}

model GameTemplate {
  id            String                    @id @default(uuid())
  name          String
  gradeLevel    String?                   @map("grade_level")
  themes        String[]
  discipline    String?
  description   String?
  defaultMode   PlayMode?                 @map("default_mode")
  createdAt     DateTime                  @default(now()) @map("created_at")
  updatedAt     DateTime                  @updatedAt @map("updated_at")
  creatorId     String                    @map("creator_id")
  gameInstances GameInstance[]
  creator       User                      @relation("UserCreatedGameTemplates", fields: [creatorId], references: [id])
  questions     QuestionsInGameTemplate[]

  @@map("game_templates")
}

model QuestionsInGameTemplate {
  gameTemplateId String       @map("game_template_id")
  questionUid    String       @map("question_uid")
  sequence       Int
  createdAt      DateTime     @default(now()) @map("created_at")
  gameTemplate   GameTemplate @relation(fields: [gameTemplateId], references: [id], onDelete: Cascade)
  question       Question     @relation(fields: [questionUid], references: [uid], onDelete: Cascade)

  @@id([gameTemplateId, sequence])
  @@unique([gameTemplateId, questionUid])
  @@map("questions_in_game_templates")
}

model GameInstance {
  id                    String            @id @default(uuid())
  name                  String
  accessCode            String            @unique @map("access_code")
  status                String
  playMode              PlayMode          @map("play_mode")
  leaderboard           Json?
  currentQuestionIndex  Int?              @map("current_question_index")
  settings              Json?
  createdAt             DateTime          @default(now()) @map("created_at")
  startedAt             DateTime?         @map("started_at")
  endedAt               DateTime?         @map("ended_at")
  differedAvailableFrom DateTime?         @map("differed_available_from")
  differedAvailableTo   DateTime?         @map("differed_available_to")
  gameTemplateId        String            @map("game_template_id")
  initiatorUserId       String?           @map("initiator_user_id")
  gameTemplate          GameTemplate      @relation(fields: [gameTemplateId], references: [id])
  initiatorUser         User?             @relation("InitiatedGameInstancesByUser", fields: [initiatorUserId], references: [id])
  participants          GameParticipant[]

  @@index([accessCode])
  @@map("game_instances")
}

model GameParticipant {
  id             String            @id @default(uuid())
  gameInstanceId String            @map("game_instance_id")
  userId         String            @map("user_id")
  liveScore      Int               @default(0) @map("live_score")
  deferredScore  Int               @default(0) @map("deferred_score")
  nbAttempts     Int               @default(0) @map("nb_attempts")
  status         ParticipantStatus @default(PENDING) @map("status")
  joinedAt       DateTime          @default(now()) @map("joined_at")
  lastActiveAt   DateTime?         @map("last_active_at")
  completedAt    DateTime?         @map("completed_at")
  gameInstance   GameInstance      @relation(fields: [gameInstanceId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameInstanceId, userId])
  @@map("game_participants")
}

enum UserRole {
  STUDENT
  TEACHER
  GUEST
}

enum PlayMode {
  quiz
  tournament
  practice
}

enum ParticipantStatus {
  PENDING
  ACTIVE
  COMPLETED
  LEFT
}
