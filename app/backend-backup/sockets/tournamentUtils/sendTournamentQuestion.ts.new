/**
 * sendTournamentQuestion.ts - Centralized helper to emit filtered tournament questions to students
 *
 * This function ensures only the minimal, non-sensitive fields are sent to students:
 * - type: question type (e.g., 'choix_simple', 'choix_multiple')
 * - uid: question unique id
 * - question: question text
 * - answers: array of answer texts (no 'correct' field)
 *
 * Usage:
 *   import { sendTournamentQuestion } from './tournamentUtils/sendTournamentQuestion';
 *   sendTournamentQuestion(targetEmitter, payload); // targetEmitter is io.to(room) or socket.to(room)
 */

import { BroadcastOperator } from 'socket.io'; // Corrected import
import type { Question } from '../types/quizTypes';
import createLogger from '../../logger'; // Changed to ES6 import

const logger = createLogger('SendTournamentQuestion');

/**
 * Question payload for tournament questions sent to students
 */
export interface TournamentQuestionPayload { // Added export
    code: string;
    question: Question;
    timer: number;
    tournoiState: 'running' | 'paused' | 'stopped';
    questionIndex: number;
    questionUid: string;
}

/**
 * Filtered question data sent to students (no answers with correct information)
 */
interface FilteredQuestionData {
    type: string;
    uid: string;
    question: string; // Ensure this is always a string
    answers: string[];
    index?: number;
    total?: number;
    remainingTime?: number;
    questionState?: string;
    isQuizMode?: boolean;
    tournoiState?: string;
    timer?: number;
}

/**
 * Creates filtered question data for sending to students. (Internal helper)
 *
 * @param payload - Question payload with tournament data
 * @returns Filtered question data
 */
function createFilteredQuestionData(payload: TournamentQuestionPayload): FilteredQuestionData {
    const { question, timer, tournoiState, questionIndex } = payload;

    return {
        type: question.type,
        uid: question.uid,
        question: question.question ?? '', // Handle potentially undefined question text
        answers: Array.isArray(question.reponses)
            ? question.reponses.map(r => r.texte)
            : [],
        index: questionIndex,
        tournoiState,
        timer
    };
}

/**
 * Sends a filtered tournament question to students using a pre-configured emitter.
 *
 * @param targetEmitter - Socket.IO BroadcastOperator (e.g., io.to(room))
 * @param payload - Question payload with tournament data
 */
function sendTournamentQuestion(
    targetEmitter: BroadcastOperator<any, any>, // Changed type to BroadcastOperator
    payload: TournamentQuestionPayload
): void {
    const { code, questionUid } = payload;

    // Create filtered payload without sensitive data
    const filteredPayload = createFilteredQuestionData(payload);

    // Log what we're sending
    logger.info(`[sendTournamentQuestion] Emitting tournament_question to tournament ${code} (room derived by caller) with question ${questionUid}`);
    logger.debug(`[sendTournamentQuestion] Payload metadata: questionIndex=${filteredPayload.index}, timer=${filteredPayload.timer}, state=${filteredPayload.tournoiState}`);

    // Emit to the already targeted emitter
    targetEmitter.emit('tournament_question', filteredPayload);
}

/**
 * Legacy format support for backwards compatibility during migration.
 * Sends a filtered tournament question using a pre-configured emitter.
 *
 * @param targetEmitter - Socket.IO BroadcastOperator
 * @param questionObj - The question object
 * @param index - Question index
 * @param total - Total questions
 * @param remainingTime - Remaining time for the question
 * @param questionState - Current state of the question
 * @param isQuizMode - Flag if in quiz mode
 */
function legacySendTournamentQuestion(
    targetEmitter: BroadcastOperator<any, any>, // Changed type to BroadcastOperator
    questionObj: Question,
    index?: number,
    total?: number,
    remainingTime?: number,
    questionState?: string,
    isQuizMode?: boolean
): void {
    const filteredPayload: FilteredQuestionData = {
        type: questionObj.type,
        uid: questionObj.uid,
        question: questionObj.question ?? '', // Handle potentially undefined question text
        answers: Array.isArray(questionObj.reponses)
            ? questionObj.reponses.map(r => r.texte)
            : [],
        index,
        total,
        remainingTime,
        questionState,
        isQuizMode
    };

    logger.info(`[legacySendTournamentQuestion] Emitting tournament_question (room derived by caller)`);
    targetEmitter.emit('tournament_question', filteredPayload);
}

// Export functions for ESM imports
export {
    sendTournamentQuestion,
    legacySendTournamentQuestion,
    createFilteredQuestionData
};

// Export default for default imports
export default sendTournamentQuestion;

// Create CommonJS export object
const moduleExports = {
    sendTournamentQuestion,
    legacySendTournamentQuestion,
    createFilteredQuestionData
};

// Direct CommonJS export for bridge files
if (typeof module !== 'undefined' && module.exports) {
    Object.assign(module.exports, moduleExports);
    module.exports.default = sendTournamentQuestion;
}
